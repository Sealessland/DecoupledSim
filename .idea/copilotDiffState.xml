<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/include/AdaptSim/Example.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/AdaptSim/Example.h" />
              <option name="updatedContent" value="#pragma once&#10;&#10;namespace AdaptSim {&#10;class Example {&#10;public:&#10;    Example();&#10;    int add(int a, int b);&#10;};&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/include/AdaptSim/multicore/cfg.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/AdaptSim/multicore/cfg.h" />
              <option name="originalContent" value="//&#10;// Created by sealessland on 2025/7/27.&#10;//&#10;&#10;#ifndef CFG_H&#10;#define CFG_H&#10;#include &lt;string&gt;&#10;namespace multiple {&#10;&#10;    struct cfg&#10;    {&#10;        static constexpr bool diff_enaled = true;  // 差分测试启用&#10;        static constexpr bool trace_enabled = true; // 波形追踪启用&#10;        static constexpr bool inst_trace_enabled = true; // 指令追踪启用&#10;        static constexpr bool mem_trace_enabled = true; // 内存追踪启用&#10;        std::string diff_ref_path = &quot;&quot;; // 差分测试参考路径&#10;        std::string wave_file = &quot;wave.vcd&quot;; // 波形文件名&#10;        static constexpr std::string img_path = &quot;&quot;; // 默认内存镜像路径&#10;        static constexpr bool extern_img = false; // 是否使用外部内存镜像&#10;    };&#10;// 全局配置实例;&#10;&#10;} // multiple&#10;&#10;#endif //CFG_H&#10;" />
              <option name="updatedContent" value="//&#10;// Created by sealessland on 2025/7/27.&#10;//&#10;&#10;#ifndef CFG_H&#10;#define CFG_H&#10;#include &lt;string&gt;&#10;&#10;namespace multiple {&#10;&#10;    struct cfg&#10;    {&#10;        bool diff_enaled = true;  // 差分测试启用&#10;        bool trace_enabled = true; // 波形追踪启用&#10;        bool inst_trace_enabled = true; // 指令追踪启用&#10;        bool mem_trace_enabled = true; // 内存追踪启用&#10;        std::string diff_ref_path = &quot;&quot;; // 差分测试参考路径&#10;        std::string wave_file = &quot;wave.vcd&quot;; // 波形文件名&#10;        std::string img_path = &quot;&quot;; // 默认内存镜像路径&#10;        bool extern_img = false; // 是否使用外部内存镜像&#10;    };&#10;&#10;    extern cfg cfg_inst; // 声明一个外部链接的全局配置实例&#10;&#10;} // multiple&#10;&#10;#endif //CFG_H" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/include/AdaptSim/multicore/core.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/AdaptSim/multicore/core.h" />
              <option name="originalContent" value="//&#10;// Created by sealessland on 2025/7/27.&#10;//&#10;&#10;#ifndef CORE_H&#10;#define CORE_H&#10;&#10;namespace multiple {&#10;&#10;class core {&#10;&#10;};&#10;&#10;} // multiple&#10;&#10;#endif //CORE_H&#10;" />
              <option name="updatedContent" value="//&#10;// Created by sealessland on 2025/7/27.&#10;//&#10;&#10;#ifndef CORE_H&#10;#define CORE_H&#10;&#10;#include &lt;cstdint&gt;&#10;#include &lt;memory&gt; // For std::unique_ptr&#10;&#10;// 前向声明 Verilator 生成的类，以避免在头文件中包含大型 Verilator 头文件&#10;class Vcore;&#10;class VerilatedVcdC;&#10;&#10;namespace multiple {&#10;&#10;    // 调试信息结构体，用于从仿真核心获取状态&#10;    struct CoreDebugInfo {&#10;        uint32_t pc;&#10;        uint32_t inst;&#10;        uint32_t in1;&#10;        uint32_t in2;&#10;        uint32_t out;&#10;        uint32_t mem_addr;&#10;        uint32_t mem_data;&#10;        uint32_t gpr[32];&#10;        uint64_t inst_cnt;&#10;        uint64_t cycle_cnt;&#10;    };&#10;&#10;    // Verilator 仿真核心的封装类&#10;    class Sim_core {&#10;    private:&#10;        std::unique_ptr&lt;Vcore&gt; Top;&#10;        std::unique_ptr&lt;VerilatedVcdC&gt; tfp;&#10;&#10;        void toggle_clock();&#10;&#10;    public:&#10;        Sim_core();&#10;        ~Sim_core();&#10;&#10;        // 禁止拷贝和赋值，因为该类管理着独特的资源&#10;        Sim_core(const Sim_core&amp;) = delete;&#10;        Sim_core&amp; operator=(const Sim_core&amp;) = delete;&#10;&#10;        void sim_init();&#10;        CoreDebugInfo get_debug_info() const;&#10;        void run_inst_once();&#10;        int run_inst(int num_inst);&#10;    };&#10;&#10;} // namespace multiple&#10;&#10;#endif //CORE_H" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/include/v_include/VExample.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/v_include/VExample.h" />
              <option name="originalContent" value="#pragma once&#10;&#10;namespace v_include {&#10;class VExample {&#10;public:&#10;    VExample();&#10;    int mul(int a, int b);&#10;};&#10;}&#10;" />
              <option name="updatedContent" value="#pragma once&#10;&#10;namespace v_include {&#10;class VExample {&#10;public:&#10;    VExample();&#10;    int mul(int a, int b);&#10;};&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Example.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Example.cpp" />
              <option name="updatedContent" value="#include &quot;AdaptSim/Example.h&quot;&#10;&#10;namespace AdaptSim {&#10;Example::Example() {}&#10;&#10;int Example::add(int a, int b) {&#10;    return a + b;&#10;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/VExample.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/VExample.cpp" />
              <option name="updatedContent" value="#include &quot;v_include/VExample.h&quot;&#10;&#10;namespace v_include {&#10;VExample::VExample() {}&#10;&#10;int VExample::mul(int a, int b) {&#10;    return a * b;&#10;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/multi-core/cfg.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/multi-core/cfg.cpp" />
              <option name="originalContent" value="//&#10;// Created by sealessland on 2025/7/27.&#10;//&#10;&#10;#include &quot;cfg.h&quot;&#10;#include &lt;string&gt;&#10;namespace multiple {&#10;    struct cfg&#10;    {   static constexpr bool time_analysisenabled = true; // 调试模式启用&#10;        static constexpr bool diff_enaled = true;  // 差分测试启用&#10;        static constexpr bool trace_enabled = true; // 波形追踪启用&#10;        static constexpr bool inst_trace_enabled = true; // 指令追踪启用&#10;        static constexpr bool mem_trace_enabled = true; // 内存追踪启用&#10;        std::string diff_ref_path = &quot;&quot;; // 差分测试参考路径&#10;        std::string wave_file = &quot;wave.vcd&quot;; // 波形文件名&#10;    };&#10;} // multiple" />
              <option name="updatedContent" value="//&#10;// Created by sealessland on 2025/7/27.&#10;//&#10;&#10;#include &quot;AdaptSim/multicore/cfg.h&quot; // 包含头文件以获取声明&#10;&#10;namespace multiple {&#10;    // 定义在 cfg.h 中声明的全局配置实例&#10;    cfg cfg_inst;&#10;} // multiple" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_comprehensive.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_comprehensive.cpp" />
              <option name="updatedContent" value="#include &quot;AdaptSim/Example.h&quot;&#10;#include &quot;v_include/VExample.h&quot;&#10;#include &lt;cassert&gt;&#10;#include &lt;iostream&gt;&#10;&#10;// 这个测试程序旨在调用项目中定义的所有主要组件，&#10;// 以确保它们能够被正确地包含、编译和链接。&#10;&#10;int main() {&#10;    std::cout &lt;&lt; &quot;--- Running Comprehensive Project Test ---&quot; &lt;&lt; std::endl;&#10;&#10;    // 1. 测试来自 include/AdaptSim/ 和 src/ 的 Example 类&#10;    AdaptSim::Example ex;&#10;    int sum = ex.add(10, 20);&#10;    std::cout &lt;&lt; &quot;Testing AdaptSim::Example: 10 + 20 = &quot; &lt;&lt; sum &lt;&lt; std::endl;&#10;    assert(sum == 30);&#10;&#10;    // 2. 测试来自 include/v_include/ 和 src/ 的 VExample 类&#10;    v_include::VExample vex;&#10;    int product = vex.mul(10, 20);&#10;    std::cout &lt;&lt; &quot;Testing v_include::VExample: 10 * 20 = &quot; &lt;&lt; product &lt;&lt; std::endl;&#10;    assert(product == 200);&#10;&#10;    // 如果程序能运行到这里并且没有触发 assert，说明基本功能正常。&#10;    // lib/ 目录的测试通常涉及链接一个预编译的库，&#10;    // 这里我们通过链接 AdaptSimLib (由 src/*.cpp 编译而来) 间接测试了库的链接能力。&#10;&#10;    std::cout &lt;&lt; &quot;--- Comprehensive Project Test Passed! ---&quot; &lt;&lt; std::endl;&#10;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_example.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_example.cpp" />
              <option name="updatedContent" value="#include &quot;AdaptSim/Example.h&quot;&#10;#include &lt;cassert&gt;&#10;#include &lt;iostream&gt;&#10;&#10;int main() {&#10;    AdaptSim::Example ex;&#10;    assert(ex.add(2, 3) == 5);&#10;    std::cout &lt;&lt; &quot;Test passed!&quot; &lt;&lt; std::endl;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>