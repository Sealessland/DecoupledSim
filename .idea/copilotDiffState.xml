<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Makefile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Makefile" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/include/AdaptSim/Example.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/AdaptSim/Example.h" />
              <option name="updatedContent" value="#pragma once&#10;&#10;namespace AdaptSim {&#10;class Example {&#10;public:&#10;    Example();&#10;    int add(int a, int b);&#10;};&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/include/v_include/VExample.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/v_include/VExample.h" />
              <option name="originalContent" value="#pragma once&#10;&#10;namespace v_include {&#10;class VExample {&#10;public:&#10;    VExample();&#10;    int mul(int a, int b);&#10;};&#10;}&#10;" />
              <option name="updatedContent" value="#pragma once&#10;&#10;namespace v_include {&#10;class VExample {&#10;public:&#10;    VExample();&#10;    int mul(int a, int b);&#10;};&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Example.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Example.cpp" />
              <option name="updatedContent" value="#include &quot;AdaptSim/Example.h&quot;&#10;&#10;namespace AdaptSim {&#10;Example::Example() {}&#10;&#10;int Example::add(int a, int b) {&#10;    return a + b;&#10;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/VExample.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/VExample.cpp" />
              <option name="updatedContent" value="#include &quot;v_include/VExample.h&quot;&#10;&#10;namespace v_include {&#10;VExample::VExample() {}&#10;&#10;int VExample::mul(int a, int b) {&#10;    return a * b;&#10;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_comprehensive.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_comprehensive.cpp" />
              <option name="updatedContent" value="#include &quot;AdaptSim/Example.h&quot;&#10;#include &quot;v_include/VExample.h&quot;&#10;#include &lt;cassert&gt;&#10;#include &lt;iostream&gt;&#10;&#10;// 这个测试程序旨在调用项目中定义的所有主要组件，&#10;// 以确保它们能够被正确地包含、编译和链接。&#10;&#10;int main() {&#10;    std::cout &lt;&lt; &quot;--- Running Comprehensive Project Test ---&quot; &lt;&lt; std::endl;&#10;&#10;    // 1. 测试来自 include/AdaptSim/ 和 src/ 的 Example 类&#10;    AdaptSim::Example ex;&#10;    int sum = ex.add(10, 20);&#10;    std::cout &lt;&lt; &quot;Testing AdaptSim::Example: 10 + 20 = &quot; &lt;&lt; sum &lt;&lt; std::endl;&#10;    assert(sum == 30);&#10;&#10;    // 2. 测试来自 include/v_include/ 和 src/ 的 VExample 类&#10;    v_include::VExample vex;&#10;    int product = vex.mul(10, 20);&#10;    std::cout &lt;&lt; &quot;Testing v_include::VExample: 10 * 20 = &quot; &lt;&lt; product &lt;&lt; std::endl;&#10;    assert(product == 200);&#10;&#10;    // 如果程序能运行到这里并且没有触发 assert，说明基本功能正常。&#10;    // lib/ 目录的测试通常涉及链接一个预编译的库，&#10;    // 这里我们通过链接 AdaptSimLib (由 src/*.cpp 编译而来) 间接测试了库的链接能力。&#10;&#10;    std::cout &lt;&lt; &quot;--- Comprehensive Project Test Passed! ---&quot; &lt;&lt; std::endl;&#10;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_example.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_example.cpp" />
              <option name="updatedContent" value="#include &quot;AdaptSim/Example.h&quot;&#10;#include &lt;cassert&gt;&#10;#include &lt;iostream&gt;&#10;&#10;int main() {&#10;    AdaptSim::Example ex;&#10;    assert(ex.add(2, 3) == 5);&#10;    std::cout &lt;&lt; &quot;Test passed!&quot; &lt;&lt; std::endl;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>